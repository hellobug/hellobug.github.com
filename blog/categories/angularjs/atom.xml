<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: angularjs | Hello Bug~]]></title>
  <link href="http://hellobug.github.com/blog/categories/angularjs/atom.xml" rel="self"/>
  <link href="http://hellobug.github.com/"/>
  <updated>2013-04-22T19:50:03+08:00</updated>
  <id>http://hellobug.github.com/</id>
  <author>
    <name><![CDATA[hellobug]]></name>
    <email><![CDATA[joy.xczhang+hellobug@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[[AngularJS系列(3)] View-Model双向绑定背后的故事~]]></title>
    <link href="http://hellobug.github.com/blog/angularjs-two-ways-binding/"/>
    <updated>2013-03-27T22:13:00+08:00</updated>
    <id>http://hellobug.github.com/blog/angularjs-two-ways-binding</id>
    <content type="html"><![CDATA[<p>剧情开始之前，先介绍一下重要背景~三个概念~</p>

<ul>
<li><strong>Dirty Checking</strong> – AngularJS内部比较value现在的值和之前的值，如果发生了改变，就触发change事件。</li>
<li><strong>Digest</strong> – 执行<code>Dirty Checking</code>的机制，由$digest()触发。</li>
<li><strong>Apply</strong> – 当dom事件在AngularJS机制外被触发时，需要通知AngularJS进行<code>Digest</code>。由<code>$apply()</code>触发。</li>
</ul>


<!-- more -->


<h1>$digest()</h1>

<p><img src="/my-images/angularjs-2-ways-1-1.png"></p>

<p>Digest就像AngularJS的心跳一样~ <br/>
它每50ms蹦一次，蹦的时候会触发所属的scope和其所有子scope的dirty checking，dirty checking又会触发$watch()（马上会介绍<code>$watch()</code>），整个Angular双向绑定机制就活了起来~（有人可能会问了，蹦的这么频繁，性能体验神马的都没问题么？一会儿咱专门聊这个哈~）
注意：不建议直接调用<code>$scope.$digest()</code>，而应该使用<code>$scope.$apply()</code>，原因一会儿细说~</p>

<h1>$watch()</h1>

<p><img src="/my-images/angularjs-2-ways-1-2.png"></p>

<p>每个成功的digest背后都有一群好watch~</p>

<ul>
<li>在digest执行时，如果<code>watch</code>观察的value与上次执行时不一样时，就会被触发</li>
<li>AngularJS内部的watch实现了页面随model的及时更新</li>
<li>也可手动调用~ <br/>
  <strong>参数1</strong>：待观察的value <br/>
  <strong>参数2</strong>：value改变时想执行的操作 <br/>
  <strong>参数3</strong>：true表示比较的是值，而不是引用，由于javascript对象比较比较的是引用地址（可参考<a href="/blog/javascript-variable-assignment/" title="[JS] 让人犯晕的Javascript变量赋值">这篇blog</a>），所以即使重新赋值了相同的内容，也会触发change事件，而大部分时候，对于相同的内容，我们不希望执行watch里的操作，所以可以把第三个参数设置成true。</li>
</ul>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">$scope</span><span class="p">.</span><span class="nx">$watch</span><span class="p">(</span><span class="s1">&#39;name&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">newValue</span><span class="p">,</span> <span class="nx">oldValue</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="cm">/* Do something here */</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">},</span> <span class="kc">true</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h1>$apply()</h1>

<p><img src="/my-images/angularjs-2-ways-1-3.png"></p>

<p>我们可以把<code>apply</code>看成个给AngularJS送信的~ <br/>
<code>$scope.$apply()</code>会触发digest，如果有一个function参数，function会先被执行，再digest~</p>

<p><strong>应该啥时候用呢？</strong> <br/>
当dom事件在AngularJS机制外被触发时~</p>

<p><strong>什么样的情况算机制外呢？</strong><br/>
喂，jQuery，你就别看别人了~！！</p>

<p>现在到这个问题了，<strong>为啥推荐使用<code>$apply</code>而不是<code>$digest</code>？</strong>  <br/>
因为<code>$apply</code>其实不能把信直接送给<code>$digest</code>，之间还有<code>$eval</code>门卫把关，如果<code>$apply</code>带的表达式不合法，<code>$eval</code>会把错误送交<code>$exceptionHandler service</code>，合法才触发digest，所以更安全~</p>

<p><strong>举个栗子~</strong></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">ng-blur=</span><span class="s">&quot;closeDialog()&quot;</span> <span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">myApp</span><span class="p">.</span><span class="nx">directive</span><span class="p">(</span><span class="s1">&#39;ngBlur&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span> <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">restrict</span><span class="o">:</span><span class="s1">&#39;A&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">link</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">scope</span><span class="p">,</span> <span class="nx">element</span><span class="p">,</span> <span class="nx">attrs</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>           <span class="nx">$</span><span class="p">(</span><span class="nx">elelment</span><span class="p">).</span><span class="nx">bind</span><span class="p">(</span><span class="s1">&#39;blur&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>                <span class="nx">scope</span><span class="p">.</span><span class="nx">$apply</span><span class="p">(</span><span class="nx">attrs</span><span class="p">.</span><span class="nx">ngBlur</span><span class="p">);</span>
</span><span class='line'>           <span class="p">});</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'> <span class="p">};</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>jQuery对blur事件的绑定就属于AngularJS机制外触发，必须使用<code>$apply</code>才能生效。</p>

<h1>Performance</h1>

<p>下面开始说性能了，50ms跳一次，受不受得了呢？</p>

<p><strong>先来看两条科学研究的结果：</strong></p>

<ul>
<li><strong>人对变化的反应是慢的</strong>：任何比50ms还快的变化都是不可被察觉的~</li>
<li><strong>人对信息的处理能力是有限的</strong>：在一页处理2000条信息已经算是极限了，再多的信息量往一页上堆只能说是不好的设计了，而且人也无法处理了~</li>
</ul>


<p>所以问题就演变为：<strong>我们能不能在50ms里做2000次比较呢？</strong> <br/>
其实，以现在的技术来说，即使是很慢的浏览器也没问题的。当然如果每个比较都写的特别复杂就另说了~也就是说在写watch语句时，如果要watch的语句太复杂的话，看看是不是可以重构简化一下啦~</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[AngularJS系列(2)] Scope什么的~]]></title>
    <link href="http://hellobug.github.com/blog/angularjs-scope/"/>
    <updated>2013-03-15T20:47:00+08:00</updated>
    <id>http://hellobug.github.com/blog/angularjs-scope</id>
    <content type="html"><![CDATA[<p>Scope是AngularJS里的一个很重要的概念，简单的说它就是用来保存AngularJS Model们的对象，是Model们温暖的小家～</p>

<p>那这个小家是什么时候造的呢？</p>

<!-- more -->


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;html</span> <span class="na">ng-app=</span><span class="s">&quot;mainApp&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>我们知道，<code>ng-app</code>是一个应用启动AngularJS的入口点，在这里也会创建一个root scope，在controller里可以通过<code>$rootScope</code>调到，每个应用只能有一个root scope（当然了～root嘛～），但它会有多个child scope，那啥时候会创建child scope呢？</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;html</span> <span class="na">ng-app=</span><span class="s">&quot;mainApp&quot;</span><span class="nt">&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;pre&gt;&lt;code&gt;</span><span class="ni">&amp;lt;</span>body ng-controller=&quot;MainCtrl&quot;<span class="ni">&amp;gt;</span>
</span><span class='line'>    <span class="ni">&amp;lt;</span>div ng-controller=&quot;SubCtrl&quot; ng-include src=&quot; &#39;template.html&#39; &quot;<span class="ni">&amp;gt;</span>
</span><span class='line'>    <span class="ni">&amp;lt;</span>/div<span class="ni">&amp;gt;</span>
</span><span class='line'>    <span class="ni">&amp;lt;</span>ul<span class="ni">&amp;gt;</span>
</span><span class='line'>        <span class="ni">&amp;lt;</span>li ng-repeat=&quot;item in items&quot;<span class="ni">&amp;gt;</span>{{item.name}}<span class="ni">&amp;lt;</span>/li<span class="ni">&amp;gt;</span>
</span><span class='line'>    <span class="ni">&amp;lt;</span>/ul<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="ni">&amp;lt;</span>/body<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="nt">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>在上面的例子里，<code>ng-controller</code> <code>ng-include</code> <code>ng-repeat</code>都创建了新的child scope（<code>ng-repeat</code>是对每一个重复的元素都创建了新的child scope），他们之间的父子关系是这样的：</p>

<p><img src="/my-images/angularjs-scope-1-1.png"></p>

<p>包含关系即是他们的父子关系，子scope是可以访问父scope上绑定的所有model和function的。</p>

<p>AngularJS会给scope对应的dom添加叫ng-scope的class，如果我们给自己的应用加这样一个css~
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.ng-scope</span> <span class="p">{</span><span class="k">border</span><span class="o">:</span> <span class="m">2px</span> <span class="k">dotted</span> <span class="nb">red</span><span class="p">;}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
通过红色的虚线边框我们也可以看出来大概scope的范围，但注意，并不是所有的ng-scope都是新的scope，有些ng-scope类名对应的dom共享的是同一个scope。</p>

<p>细心的童鞋可能注意到，<code>ng-controller="SubCtrl"</code>和<code>ng-include</code>放在同一个div上了，为啥<code>ng-controller="SubCtrl"</code>就是爸爸，<code>ng-include</code>就是儿子呢？ <br/>
这个没啥特别的原因，<code>ng-controller</code>在AngularJS底层代码里实现的比较靠前而已，与在div上标明的顺序无关，但是这时会发生一个问题：</p>

<p>假如在<code>ng-include</code>对应的<code>template.html</code>里有这样的代码：
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>template.html </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">ng-model=</span><span class="s">&quot;lastName&quot;</span> <span class="nt">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>我们会发现，在<code>ng-controller="SubCtrl"</code>这个controller里是取不到<code>lastName</code>的值的。</p>

<p>原因是这样的~ <br/>
我们假设<code>ng-controller="SubCtrl"</code>对应的是<strong>Scope A</strong>，<code>ng-include</code>对应的是<strong>Scope B</strong>~</p>

<ol>
<li><code>ng-include</code>创建的<strong>Scope B</strong>是<code>ng-controller</code>创建的<strong>Scope A</strong>的子scope，所以在<code>template.html</code>里可以访问<strong>Scope A</strong>的model和function。</li>
<li>在<code>template.html</code>里用<code>ng-model</code>绑定的model，是存放在<strong>Scope B</strong>上的，<strong>Scope A</strong>是拿不到的，即使model同名。</li>
</ol>


<p>解决方案：</p>

<ul>
<li>直接对<strong>Scope A</strong>的model绑定成员对象，如<code>ng-model="user.lastName"</code></li>
<li>或在<code>template.html</code>使用<code>ng-model</code>绑定model时，加上<code>$parent</code>（取父scope），如：<code>ng-model="$parent.lastName"</code>，这样info就绑定在<strong>Scope A</strong>上了</li>
</ul>


<p>比较推荐第一种方式，因为第一种抽象出了对象，比起第二种所有的model都直接绑在$scope上来，封装的更好~</p>

<p><a href="http://docs.angularjs.org/guide/scope">这里是官方Scope介绍~</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[AngularJS系列(1)] 感受篇~]]></title>
    <link href="http://hellobug.github.com/blog/angularjs-introduction/"/>
    <updated>2013-03-12T20:10:00+08:00</updated>
    <id>http://hellobug.github.com/blog/angularjs-introduction</id>
    <content type="html"><![CDATA[<p>先来俩栗子感受一下~</p>

<!-- more -->


<p><code>栗1</code>现在有个需求，希望页面上某段文字及时的显示某个输入框的输入内容~</p>

<p>如果我们用jQuery来写是这样的：
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>栗1 - jQuery版本 </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;h1&gt;</span>Hello, <span class="nt">&lt;span</span> <span class="na">id=</span><span class="s">&quot;namePlaceholder&quot;</span><span class="nt">&gt;&lt;/span&gt;&lt;/h1&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;&lt;input</span> <span class="na">id=</span><span class="s">&quot;name&quot;</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span><span class="nt">&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#name&#39;</span><span class="p">).</span><span class="nx">keydown</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">){</span>
</span><span class='line'>        <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#namePlaceholder&#39;</span><span class="p">).</span><span class="nx">html</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">value</span><span class="p">);</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="nt">&lt;/script&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>如果用AngularJS来写呢，是这样的：
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>栗1 - AngularJS版本 </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;h1&gt;</span>Hello, {{name}}<span class="nt">&lt;/h1&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">ng-model=</span><span class="s">&quot;name&quot;</span><span class="nt">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><code>栗2</code>又来个需求，有个人名的数组，想把这些名字列到页面上~</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>栗2 - jQuery版本 </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;ul</span> <span class="na">id=</span><span class="s">&quot;list&quot;</span><span class="nt">&gt;&lt;/ul&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="p">[</span><span class="s1">&#39;张三&#39;</span><span class="p">,</span> <span class="s1">&#39;李四&#39;</span><span class="p">,</span> <span class="s1">&#39;王五&#39;</span><span class="p">].</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">item</span><span class="p">){</span>
</span><span class='line'>        <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#list&#39;</span><span class="p">).</span><span class="nx">append</span><span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;&lt;li&gt;&#39;</span> <span class="o">+</span> <span class="nx">item</span> <span class="o">+</span> <span class="s1">&#39;&lt;/li&gt;&#39;</span><span class="p">));</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="nt">&lt;/script&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>栗2 - AngularJS版本 </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;ul&gt;</span>
</span><span class='line'>    <span class="nt">&lt;li</span> <span class="na">ng-repeat=</span><span class="s">&quot;item in [&#39;张三&#39;, &#39;李四&#39;, &#39;王五&#39;]&quot;</span><span class="nt">&gt;</span>{{item}}<span class="nt">&lt;/li&gt;</span>
</span><span class='line'><span class="nt">&lt;/ul&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>通过比较，可以发现<a href="http://angularjs.org/">AngularJS</a>：</p>

<ul>
<li><strong> 代码更简洁 </strong>（少写好多js代码啊~）</li>
<li><strong> 扩展了html的功能 </strong>（html貌似变的很强大哇！）</li>
<li><strong> 实现了model和view的双向绑定 </strong>（随时在input里输入，随时通过<code>ng-model</code>绑定到<code>name</code>这个model上~）</li>
</ul>


<p>其实<a href="http://angularjs.org/">AngularJS</a>还：</p>

<ul>
<li><strong> 分离了JS逻辑和页面渲染 </strong>（本来JS又要忙数据交互，又要忙业务逻辑，又要忙页面渲染，现在html长大了，可以分担了~）</li>
<li><strong> 为JS提供了MVC框架 </strong>（我们熟悉的MVC~）</li>
<li><strong> 提供了One Page Application流畅的用户体验 </strong>（不像以前，每换一个页面都要重新向后台申请，现在是华丽的页面间无缝切换啊~）</li>
<li><strong> 提供依赖注入机制 </strong>（意味着更支持模块化~）</li>
<li><strong> 便于写单元测试 </strong>（行为和界面分离后，行为很方便测试啊~质量更有保障~）</li>
</ul>


<p>以后会慢慢介绍这些优点，先来看一个完整的AngularJS应用：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>main.html </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="ni">&amp;lt;</span>!doctype html&gt;
</span><span class='line'><span class="nt">&lt;html</span> <span class="na">ng-app=</span><span class="s">&quot;myApp&quot;</span><span class="nt">&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;pre&gt;&lt;code&gt;</span><span class="ni">&amp;lt;</span>head<span class="ni">&amp;gt;</span>
</span><span class='line'>    <span class="ni">&amp;lt;</span>script type=&quot;text/javascript&quot; src=&quot;https://ajax.googleapis.com/ajax/libs/angularjs/1.0.6/angular.min.js&quot;<span class="ni">&amp;gt;&amp;lt;</span>/script<span class="ni">&amp;gt;</span>
</span><span class='line'>    <span class="ni">&amp;lt;</span>script type=&quot;text/javascript&quot; src=&quot;app.js&quot;<span class="ni">&amp;gt;&amp;lt;</span>/script<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="ni">&amp;lt;</span>/head<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="ni">&amp;lt;</span>body<span class="ni">&amp;gt;</span>
</span><span class='line'>    <span class="ni">&amp;lt;</span>h1<span class="ni">&amp;gt;</span>Hello, {{name}}<span class="ni">&amp;lt;</span>/h1<span class="ni">&amp;gt;</span>
</span><span class='line'>    <span class="ni">&amp;lt;</span>input type=&quot;text&quot; ng-model=&quot;name&quot;<span class="ni">&amp;gt;</span>
</span><span class='line'>    <span class="ni">&amp;lt;</span>ul<span class="ni">&amp;gt;</span>
</span><span class='line'>        <span class="ni">&amp;lt;</span>li ng-repeat=&quot;item in nameList&quot;<span class="ni">&amp;gt;</span>{{item}}<span class="ni">&amp;lt;</span>/li<span class="ni">&amp;gt;</span>
</span><span class='line'>    <span class="ni">&amp;lt;</span>/ul<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="ni">&amp;lt;</span>/body<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="nt">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>app.js </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">&#39;myApp&#39;</span><span class="p">,</span> <span class="p">[]);</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">app</span><span class="p">.</span><span class="nx">controller</span><span class="p">(</span><span class="s1">&#39;MainCtrl&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$scope</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">$scope</span><span class="p">.</span><span class="nx">nameList</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;张三&#39;</span><span class="p">,</span> <span class="s1">&#39;李四&#39;</span><span class="p">,</span> <span class="s1">&#39;王五&#39;</span><span class="p">];</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><strong> <code>ng-app</code> </strong>:  <br/>
AngularJS的入口点。从这里开始，AngularJS系统就开始工作了~后面对应的<code>myApp</code>是在<code>app.js</code>文件里定义的angular module，module上注册了一个controller <code>MainCtrl</code>，model都是绑定在它对应的<code>$scope</code>上的。Scope的概念以后会细讲。</p>

<p><strong> <code>ng-model</code> </strong>: <br/>
在所有表单输入元素(input, select, textarea)上都可以用<code>ng-model</code>将value和model绑定起来，所输入的数值会直接被赋到对应的model上。</p>

<p><strong> <code>ng-repeat</code> </strong>: <br/>
遍历数组<code>nameList</code>重复当前页面元素。</p>

<p><strong> 其它扩展过的标签属性们 </strong>：<br/>
<a href="http://docs.angularjs.org/api">官方API</a></p>
]]></content>
  </entry>
  
</feed>
